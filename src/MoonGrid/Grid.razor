@typeparam TItem

<link href="_content/MoonGrid/styles.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap" rel="stylesheet">

<div class="container-fluid">
    <div class="float-md-left">
        @if (ShowAddNewButton)
        {
            <button type="button" class="btn btn-primary my-2" @onclick="OnNewButtonActivated">@AddNewButtonText</button>
        }

        @if (OrderOptions.Count() > 0)
        {
            <span class="@(ShowAddNewButton ? "ml-2 ml-md-3 " : "")mr-md-2 my-2">
                <span class="mr-1">@GridConfiguration.Default.OrderByText</span>
                <select id="pagecount" class="select-css select-buttonheight mr-md-2 my-2" @onchange="OnSelectOrder">
                    @foreach (var item in OrderOptions)
                    {
                        <option value="@item.Id">@item.DisplayText</option>
                    }
                </select>
            </span>
        }

        @if (ShowFilterButton)
        {
            <button class="btn btn-info my-2@(ShowAddNewButton || OrderOptions.Count() > 0 ? " mx-md-2" : "")" data-toggle="collapse" data-target="#grid-filter">
                @if (IsFilterActive)
                {
                    <i class="@GridConfiguration.Default.FilterEnabledIcon"></i>
                }
                else
                {
                    <i class="@GridConfiguration.Default.FilterDisabledIcon"></i>
                }
                @GridConfiguration.Default.FilterButtonText
            </button>

            <div id="grid-filter" class="collapse my-2">
                @FilterTemplate
            </div>
        }
    </div>

    @if (ActionButtons.Count > 0)
    {
        <div class="float-md-right">
            @foreach (var action in ActionButtons)
            {
                <button type="button" class="btn btn-secondary my-1" @onclick="@(e => ExecuteActionButton(action))">@action.Text</button>
            }
        </div>
    }
</div>

@if (Data.Length == 0 && !Loading && NoDataTemplate != null)
{
    <div class="container-fluid my-2 float-left">
        @NoDataTemplate
    </div>
}
else
{
    <div class="container-fluid my-2">
        <div class="table-responsive">
            <table class="table table-sm moongrid-table@(FreezeFirstColumn ? " mg-table-coolfreeze" : "") @(!Expandable ? " moongrid-table-striped" : "") @(TableClass)" style="font-family:'Lato', sans-serif;">
                <thead class="@HeaderClass">
                    <tr>
                        @if (Expandable)
                        {
                            <th></th>
                        }

                        @foreach (var column in Columns)
                        {
                            var style = ComputeStyle(column);
                            var className = ComputeClass(column);
                            <th style="@style" class="@className">
                                @column.Title
                            </th>
                        }
                    </tr>
                </thead>
                @if (Loading)
                {
                    @LoadingTemplate
                }
                else
                {
                    <tbody>
                        @foreach (var row in Data)
                        {
                            var item = row.Item;
                            <tr>
                                @if (Expandable)
                                {
                                    <td>
                                        @if (row.Expanded)
                                        {
                                            <i class="fas fa-chevron-up" @onclick="@(() => ContractItem(row))"></i>
                                        }
                                        else
                                        {
                                            <i class="fas fa-chevron-down" @onclick="@(() => ExpandItem(row))"></i>
                                        }
                                    </td>
                                }

                                @foreach (var column in Columns)
                                {
                                    var style = ComputeStyle(column);
                                    var className = ComputeClass(column);
                                    @if (column.Template == null)
                                    {
                                        <td style="@style" class="@className">
                                            @column.Source.Invoke(item)
                                        </td>
                                    }
                                    else
                                    {
                                        RenderFragment renderFragment = (builder) => { builder.OpenComponent(0, column.Template); builder.CloseComponent(); };
                                        <td style="@style" class="@className">
                                            <CascadingValue Value="@item">
                                                @renderFragment
                                            </CascadingValue>
                                        </td>
                                    }
                                }
                            </tr>
                            @if (row.Expanded)
                            {
                                <tr>
                                    <td colspan="200">
                                        @row.Content
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                    @if (Data.Length > 0 && ShowTableFooter)
                    {
                        <tfoot>
                            <tr>
                                @foreach (var column in Columns)
                                {
                                    var style = ComputeStyle(column);
                                    var className = ComputeClass(column);
                                    <th style="@style" class="@className">
                                        @column.Title
                                    </th>
                                }
                            </tr>
                        </tfoot>
                    }
                }
            </table>
        </div>
    </div>
}

@if (Data.Length > 0 && IsPageable)
{
    <div class="container-fluid">
        <div class="float-left">
            <div class="my-1">
                <label for="pagecount">@GridConfiguration.Default.ItemsPerPage</label>
                <select id="pagecount" class="ml-2" @bind="ActivePageSize">
                    <option value="15">15</option>
                    <option value="30">30</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </div>
        </div>

        <nav class="float-right my-1">
            <ul class="pagination">
                <li class="page-item@(QueryOptions.PageNumber <= 1 ? " disabled" : "")">
                    <div class="page-link mg-pager-button" @onclick="MoveBack">
                        <i class="fas fa-chevron-left mr-2"></i> @GridConfiguration.Default.PreviousButtonText
                    </div>
                </li>
                <li class="page-item disabled">
                    <div class="page-link">
                        @(string.Format(GridConfiguration.Default.PageNumberText, QueryOptions.PageNumber))
                    </div>
                </li>
                <li class="page-item@(!HasMoreData ? " disabled" : "")">
                    <div class="page-link mg-pager-button" @onclick="MoveNext">
                        @GridConfiguration.Default.NextButtonText <i class="fas fa-chevron-right ml-2"></i>
                    </div>
                </li>
            </ul>
        </nav>
    </div>

    <div style="clear:both"></div>
}
