@page "/filterandordering"

<div class="container-fluid">
    <h2>Filter and order data</h2>
</div>

<MoonGrid.Grid TItem="Product" Columns="@Columns" DataSource="@GetProductData"
               ShowFilterButton="true" EventCallbacks="@EventCallbacks"
               OrderOptions="OrderOptions" ActionButtons="Actions"
               FreezeFirstColumn="true">
    <FilterTemplate>
        <div class="form-inline">
            @if (IsFilterActive)
            {
                <input disabled type="text" class="form-control mb-2 mr-sm-2" id="filter-name-disabled" @bind="CategoryFilter">

                <button type="button" class="mb-2 ml-lg-1 pt-md-2 btn btn-dark pr-3" @onclick="RemoveFilter">
                    <i class="fas fa-times" style="font-size: 1.2rem;"></i>
                    <span style="font-size: 1rem;">Remove filter</span>
                </button>
            }
            else
            {
                <div class="mr-2">Filter by category</div>
                <input type="text" class="form-control mb-2 mr-sm-2" id="filter-name" @bind="CategoryFilter" placeholder="Category">

                <button type="button" class="mb-2 ml-lg-1 pt-md-2 btn btn-dark pr-3" @onclick="ApplyFilter">
                    <i class="fas fa-check" style="font-size: 1.2rem;"></i>
                    <span style="font-size: 1rem;">Apply</span>
                </button>
            }
        </div>
    </FilterTemplate>
</MoonGrid.Grid>

@code {
    public GridColumn<Product>[] Columns;
    public bool IsFilterActive;
    public string CategoryFilter;
    public EventCallbacks EventCallbacks = new EventCallbacks();

    public ICollection<OrderOption> OrderOptions = new List<OrderOption>
{
        new OrderOption<Product>("name", "Name", (x) => x.OrderBy(x => x.Name)),
        new OrderOption<Product>("price", "Price", (x) => x.OrderBy(x => x.Price))
    };

    public List<ActionButton> Actions = new List<ActionButton>();

    protected override void OnInitialized()
    {
        Columns = new[] {
            new GridColumn<Product>("Name", x => x.Name, ColumnWidth.FromEm(30)),
            new GridColumn<Product>("Sku", x => x.Sku, ColumnWidth.FromEm(12)),
            new GridColumn<Product>("Category", x => x.Category),
            new GridColumn<Product>("Price", x => x.Price.ToString("C2"),
                                             ColumnWidth.FromEm(10),
                                             alignment: ColumnAlignment.Right),
            new GridColumn<Product>("Stock", x => x.Stock.ToString("N0"),
                                             ColumnWidth.FromEm(10),
                                             alignment:ColumnAlignment.Right,
                                             dynamicStyle: (Product x) => x.Stock < 100 ? "color:red;" : "" )
        };
    }

    public Task<QueryResult<Product>> GetProductData(QueryOptions queryOptions)
    {
        // You generally do this in the server, send the query options via HttpClient
        // Use sample data in this example
        var data = Program.FakeData;

        var result = new QueryResult<Product>();

        IEnumerable<Product> filteredData = data;

        if (IsFilterActive)
        {
            filteredData = data.Where(x => x.Category.Contains(CategoryFilter, StringComparison.InvariantCultureIgnoreCase));
        }

        IOrderedEnumerable<Product> orderedData;

        if (queryOptions.Order == "price")
        {
            orderedData = filteredData.OrderBy(x => x.Price);
        }
        else
        {
            orderedData = filteredData.OrderBy(x => x.Name);
        }

        var pagedData = orderedData.Skip((queryOptions.PageNumber - 1) * queryOptions.PageSize).Take(queryOptions.PageSize + 1).ToArray();

        result.ResultData = pagedData.Take(queryOptions.PageSize).ToArray();
        result.HasMoreData = pagedData.Length == queryOptions.PageSize + 1;
        return Task.FromResult(result);
    }

    void RemoveFilter()
    {
        IsFilterActive = false;
        EventCallbacks.RaiseFilterStatusChange(true);
    }

    void ApplyFilter()
    {
        if (string.IsNullOrEmpty(CategoryFilter))
        {
            return;
        }

        IsFilterActive = true;
        EventCallbacks.RaiseFilterStatusChange(false);
    }
}
