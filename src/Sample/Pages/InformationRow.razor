@page "/informationrow"

<div class="container-fluid">
    <h2>Information Row</h2>
</div>

<MoonGrid.Grid TItem="Product" Columns="@Columns" DataSource="@GetProductData" HeaderClass="thead-dark">
    <AdditionalRowTemplate Context="product">
        <div class="alert alert-primary" role="alert" style="max-width: 40rem">
            More information about @product.Name
        </div>

        <button type="button" class="btn btn-primary mb-3">
            Notifications <span class="badge badge-light">@Random.Next(1, 5)</span>
        </button>

        @code 
        {
            public Random Random { get; set; } = new Random();
        }
    </AdditionalRowTemplate>
</MoonGrid.Grid>

@code {
    public GridColumn<Product>[] Columns;

    protected override void OnInitialized()
    {
        Columns = new[] {
            new GridColumn<Product>("Name", x => x.Name, ColumnWidth.FromEm(30)),
            new GridColumn<Product>("Sku", x => x.Sku, ColumnWidth.FromEm(12)),
            new GridColumn<Product>("Category", x => x.Category),
            new GridColumn<Product>("Price", x => x.Price.ToString("C2"),
                                             ColumnWidth.FromEm(10),
                                             alignment: ColumnAlignment.Right),
            new GridColumn<Product>("Stock", x => x.Stock.ToString("N0"),
                                             ColumnWidth.FromEm(10),
                                             alignment:ColumnAlignment.Right,
                                             dynamicStyle: (Product x) => x.Stock < 100 ? "color:red;" : "" ),
           new GridColumn<Product>("", x => "", ColumnWidth.FromEm(2))
              {
                 Template = typeof(Components.ContextMenuComponent)
              }
        };
    }

    public Task<QueryResult<Product>> GetProductData(QueryOptions<Product> queryOptions)
    {
        // You generally do this in the server, send the query options via HttpClient
        // Use sample data in this example
        var data = Program.FakeData;
        var pagedData = data.Skip((queryOptions.PageNumber - 1) * queryOptions.PageSize).Take(queryOptions.PageSize + 1).ToArray();

        var result = new QueryResult<Product>();
        result.ResultData = pagedData.Take(queryOptions.PageSize).ToArray();
        result.HasMoreData = pagedData.Length == queryOptions.PageSize + 1;
        return Task.FromResult(result);
    }
}
