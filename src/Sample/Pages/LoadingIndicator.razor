@page "/loadingindicator"

<div class="container-fluid">
    <h2>Loading indicator</h2>
</div>

<div class="container-fluid">
    <MoonGrid.Grid TItem="Product" Columns="@Columns" DataSource="@GetProductDataSlow" TableClass="table-striped" HeaderClass="table-dark">
        <LoadingTemplate>
            <h3 class="my-2 text-center">Loading ...</h3>
        </LoadingTemplate>
    </MoonGrid.Grid>
</div>

@code {
    public GridColumn<Product>[] Columns;

    protected override void OnInitialized()
    {
        Columns = new[] {
            new GridColumn<Product>("Name", x => x.Name, ColumnWidth.FromEm(30)),
            new GridColumn<Product>("Sku", x => x.Sku, ColumnWidth.FromEm(12)),
            new GridColumn<Product>("Category", x => x.Category),
            new GridColumn<Product>("Price", x => x.Price.ToString("C2"),
                                             ColumnWidth.FromEm(10),
                                             alignment: ColumnAlignment.Right),
            new GridColumn<Product>("Stock", x => x.Stock.ToString("N0"),
                                             ColumnWidth.FromEm(10),
                                             alignment:ColumnAlignment.Right,
                                             dynamicStyle: (Product x) => x.Stock < 100 ? "color:red;" : "" ),
           new GridColumn<Product>("", x => "", ColumnWidth.FromEm(2))
              {
                 Template = typeof(Components.ContextMenuComponent)
              }
        };
    }

    public async Task<QueryResult<Product>> GetProductDataSlow(QueryOptions<Product> queryOptions)
    {
        // You generally do this in the server, send the query options via HttpClient
        // Use sample data in this example
        // We simulate a slow server here
        var data = Program.FakeData;

        var result = new QueryResult<Product>();

        IOrderedEnumerable<Product> orderedData;

        if (queryOptions.Order == "price")
        {
            orderedData = data.OrderBy(x => x.Price);
        }
        else
        {
            orderedData = data.OrderBy(x => x.Name);
        }

        var pagedData = orderedData.Skip((queryOptions.PageNumber - 1) * queryOptions.PageSize).Take(queryOptions.PageSize + 1).ToArray();

        result.ResultData = pagedData.Take(queryOptions.PageSize).ToArray();
        result.HasMoreData = pagedData.Length == queryOptions.PageSize + 1;

        await Task.Delay(1500);

        return result;
    }
}
